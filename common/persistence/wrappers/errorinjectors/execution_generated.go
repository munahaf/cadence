// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package errorinjectors

// Code generated by gowrap. DO NOT EDIT.
// template: ../templates/errorinjector.tmpl
// gowrap: http://github.com/hexdigest/gowrap

import (
	"context"

	"github.com/uber/cadence/common/log"
	"github.com/uber/cadence/common/persistence"
)

// injectorExecutionManager implements persistence.ExecutionManager interface instrumented with error injection.
type injectorExecutionManager struct {
	wrapped   persistence.ExecutionManager
	errorRate float64
	logger    log.Logger
}

// NewExecutionManager creates a new instance of ExecutionManager with error injection.
func NewExecutionManager(
	wrapped persistence.ExecutionManager,
	errorRate float64,
	logger log.Logger,
) persistence.ExecutionManager {
	return &injectorExecutionManager{
		wrapped:   wrapped,
		errorRate: errorRate,
		logger:    logger,
	}
}

func (c *injectorExecutionManager) Close() {
	c.wrapped.Close()
	return
}

func (c *injectorExecutionManager) CompleteCrossClusterTask(ctx context.Context, request *persistence.CompleteCrossClusterTaskRequest) (err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		err = c.wrapped.CompleteCrossClusterTask(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.CompleteCrossClusterTask", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) CompleteReplicationTask(ctx context.Context, request *persistence.CompleteReplicationTaskRequest) (err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		err = c.wrapped.CompleteReplicationTask(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.CompleteReplicationTask", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) CompleteTimerTask(ctx context.Context, request *persistence.CompleteTimerTaskRequest) (err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		err = c.wrapped.CompleteTimerTask(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.CompleteTimerTask", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) CompleteTransferTask(ctx context.Context, request *persistence.CompleteTransferTaskRequest) (err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		err = c.wrapped.CompleteTransferTask(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.CompleteTransferTask", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) ConflictResolveWorkflowExecution(ctx context.Context, request *persistence.ConflictResolveWorkflowExecutionRequest) (cp1 *persistence.ConflictResolveWorkflowExecutionResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		cp1, err = c.wrapped.ConflictResolveWorkflowExecution(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.ConflictResolveWorkflowExecution", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) CreateFailoverMarkerTasks(ctx context.Context, request *persistence.CreateFailoverMarkersRequest) (err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		err = c.wrapped.CreateFailoverMarkerTasks(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.CreateFailoverMarkerTasks", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) CreateWorkflowExecution(ctx context.Context, request *persistence.CreateWorkflowExecutionRequest) (cp1 *persistence.CreateWorkflowExecutionResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		cp1, err = c.wrapped.CreateWorkflowExecution(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.CreateWorkflowExecution", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) DeleteCurrentWorkflowExecution(ctx context.Context, request *persistence.DeleteCurrentWorkflowExecutionRequest) (err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		err = c.wrapped.DeleteCurrentWorkflowExecution(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.DeleteCurrentWorkflowExecution", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) DeleteReplicationTaskFromDLQ(ctx context.Context, request *persistence.DeleteReplicationTaskFromDLQRequest) (err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		err = c.wrapped.DeleteReplicationTaskFromDLQ(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.DeleteReplicationTaskFromDLQ", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) DeleteWorkflowExecution(ctx context.Context, request *persistence.DeleteWorkflowExecutionRequest) (err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		err = c.wrapped.DeleteWorkflowExecution(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.DeleteWorkflowExecution", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) GetCrossClusterTasks(ctx context.Context, request *persistence.GetCrossClusterTasksRequest) (gp1 *persistence.GetCrossClusterTasksResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		gp1, err = c.wrapped.GetCrossClusterTasks(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.GetCrossClusterTasks", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) GetCurrentExecution(ctx context.Context, request *persistence.GetCurrentExecutionRequest) (gp1 *persistence.GetCurrentExecutionResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		gp1, err = c.wrapped.GetCurrentExecution(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.GetCurrentExecution", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) GetName() (s1 string) {
	return c.wrapped.GetName()
}

func (c *injectorExecutionManager) GetReplicationDLQSize(ctx context.Context, request *persistence.GetReplicationDLQSizeRequest) (gp1 *persistence.GetReplicationDLQSizeResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		gp1, err = c.wrapped.GetReplicationDLQSize(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.GetReplicationDLQSize", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) GetReplicationTasks(ctx context.Context, request *persistence.GetReplicationTasksRequest) (gp1 *persistence.GetReplicationTasksResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		gp1, err = c.wrapped.GetReplicationTasks(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.GetReplicationTasks", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) GetReplicationTasksFromDLQ(ctx context.Context, request *persistence.GetReplicationTasksFromDLQRequest) (gp1 *persistence.GetReplicationTasksFromDLQResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		gp1, err = c.wrapped.GetReplicationTasksFromDLQ(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.GetReplicationTasksFromDLQ", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) GetShardID() (i1 int) {
	return c.wrapped.GetShardID()
}

func (c *injectorExecutionManager) GetTimerIndexTasks(ctx context.Context, request *persistence.GetTimerIndexTasksRequest) (gp1 *persistence.GetTimerIndexTasksResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		gp1, err = c.wrapped.GetTimerIndexTasks(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.GetTimerIndexTasks", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) GetTransferTasks(ctx context.Context, request *persistence.GetTransferTasksRequest) (gp1 *persistence.GetTransferTasksResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		gp1, err = c.wrapped.GetTransferTasks(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.GetTransferTasks", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) GetWorkflowExecution(ctx context.Context, request *persistence.GetWorkflowExecutionRequest) (gp1 *persistence.GetWorkflowExecutionResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		gp1, err = c.wrapped.GetWorkflowExecution(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.GetWorkflowExecution", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) IsWorkflowExecutionExists(ctx context.Context, request *persistence.IsWorkflowExecutionExistsRequest) (ip1 *persistence.IsWorkflowExecutionExistsResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		ip1, err = c.wrapped.IsWorkflowExecutionExists(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.IsWorkflowExecutionExists", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) ListConcreteExecutions(ctx context.Context, request *persistence.ListConcreteExecutionsRequest) (lp1 *persistence.ListConcreteExecutionsResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		lp1, err = c.wrapped.ListConcreteExecutions(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.ListConcreteExecutions", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) ListCurrentExecutions(ctx context.Context, request *persistence.ListCurrentExecutionsRequest) (lp1 *persistence.ListCurrentExecutionsResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		lp1, err = c.wrapped.ListCurrentExecutions(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.ListCurrentExecutions", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) PutReplicationTaskToDLQ(ctx context.Context, request *persistence.PutReplicationTaskToDLQRequest) (err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		err = c.wrapped.PutReplicationTaskToDLQ(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.PutReplicationTaskToDLQ", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) RangeCompleteCrossClusterTask(ctx context.Context, request *persistence.RangeCompleteCrossClusterTaskRequest) (rp1 *persistence.RangeCompleteCrossClusterTaskResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		rp1, err = c.wrapped.RangeCompleteCrossClusterTask(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.RangeCompleteCrossClusterTask", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) RangeCompleteReplicationTask(ctx context.Context, request *persistence.RangeCompleteReplicationTaskRequest) (rp1 *persistence.RangeCompleteReplicationTaskResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		rp1, err = c.wrapped.RangeCompleteReplicationTask(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.RangeCompleteReplicationTask", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) RangeCompleteTimerTask(ctx context.Context, request *persistence.RangeCompleteTimerTaskRequest) (rp1 *persistence.RangeCompleteTimerTaskResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		rp1, err = c.wrapped.RangeCompleteTimerTask(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.RangeCompleteTimerTask", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) RangeCompleteTransferTask(ctx context.Context, request *persistence.RangeCompleteTransferTaskRequest) (rp1 *persistence.RangeCompleteTransferTaskResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		rp1, err = c.wrapped.RangeCompleteTransferTask(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.RangeCompleteTransferTask", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) RangeDeleteReplicationTaskFromDLQ(ctx context.Context, request *persistence.RangeDeleteReplicationTaskFromDLQRequest) (rp1 *persistence.RangeDeleteReplicationTaskFromDLQResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		rp1, err = c.wrapped.RangeDeleteReplicationTaskFromDLQ(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.RangeDeleteReplicationTaskFromDLQ", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorExecutionManager) UpdateWorkflowExecution(ctx context.Context, request *persistence.UpdateWorkflowExecutionRequest) (up1 *persistence.UpdateWorkflowExecutionResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		up1, err = c.wrapped.UpdateWorkflowExecution(ctx, request)
	}

	if fakeErr != nil {
		logErr(c.logger, "ExecutionManager.UpdateWorkflowExecution", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}
