// The MIT License (MIT)

// Copyright (c) 2017-2020 Uber Technologies Inc.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package errorinjectors

// Code generated by gowrap. DO NOT EDIT.
// template: ../templates/errorinjector.tmpl
// gowrap: http://github.com/hexdigest/gowrap

import (
	"context"

	"github.com/uber/cadence/common/log"
	"github.com/uber/cadence/common/persistence"
)

// injectorConfigStoreManager implements persistence.ConfigStoreManager interface instrumented with error injection.
type injectorConfigStoreManager struct {
	wrapped   persistence.ConfigStoreManager
	errorRate float64
	logger    log.Logger
}

// NewConfigStoreManager creates a new instance of ConfigStoreManager with error injection.
func NewConfigStoreManager(
	wrapped persistence.ConfigStoreManager,
	errorRate float64,
	logger log.Logger,
) persistence.ConfigStoreManager {
	return &injectorConfigStoreManager{
		wrapped:   wrapped,
		errorRate: errorRate,
		logger:    logger,
	}
}

func (c *injectorConfigStoreManager) Close() {
	c.wrapped.Close()
	return
}

func (c *injectorConfigStoreManager) FetchDynamicConfig(ctx context.Context, cfgType persistence.ConfigType) (fp1 *persistence.FetchDynamicConfigResponse, err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		fp1, err = c.wrapped.FetchDynamicConfig(ctx, cfgType)
	}

	if fakeErr != nil {
		logErr(c.logger, "ConfigStoreManager.FetchDynamicConfig", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}

func (c *injectorConfigStoreManager) UpdateDynamicConfig(ctx context.Context, request *persistence.UpdateDynamicConfigRequest, cfgType persistence.ConfigType) (err error) {
	fakeErr := generateFakeError(c.errorRate)
	var forwardCall bool
	if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
		err = c.wrapped.UpdateDynamicConfig(ctx, request, cfgType)
	}

	if fakeErr != nil {
		logErr(c.logger, "ConfigStoreManager.UpdateDynamicConfig", fakeErr, forwardCall, err)
		err = fakeErr
		return
	}
	return
}
