import (
	"context"

	"github.com/uber/cadence/common/persistence"
	"github.com/uber/cadence/common/quotas"
)

{{ $decorator := (printf "ratelimited%s" .Interface.Name) }}

// {{$decorator}} implements {{.Interface.Type}} interface instrumented with rate limiter.
type {{$decorator}} struct {
    wrapped     {{.Interface.Type}}
    rateLimiter quotas.Limiter
}

// New{{.Interface.Name}} creates a new instance of {{.Interface.Name}} with ratelimiter.
func New{{.Interface.Name}}(
    wrapped persistence.{{.Interface.Name}},
    rateLimiter quotas.Limiter,
) persistence.{{.Interface.Name}} {
    return &{{$decorator}}{
        wrapped: wrapped,
        rateLimiter: rateLimiter,
    }
}

{{range $method := .Interface.Methods}}
    {{- if (and $method.AcceptsContext $method.ReturnsError)}}
        func (c *{{$decorator}}) {{$method.Declaration}} {
	        if ok := c.rateLimiter.Allow(); !ok {
		        err = ErrPersistenceLimitExceeded
		        return
            }
            {{ $method.Pass "c.wrapped." }}
        }
    {{else}}
           func (c *{{$decorator}}) {{$method.Declaration}} {
               {{ $method.Pass "c.wrapped." }}
           }
    {{end}}
{{end}}
