import (
	"context"

	"github.com/uber/cadence/common/log"
	"github.com/uber/cadence/common/log/tag"
	"github.com/uber/cadence/common/persistence"
)

{{ $decorator := (printf "injector%s" .Interface.Name) }}
{{ $interfaceName := .Interface.Name }}

// {{$decorator}} implements {{.Interface.Type}} interface instrumented with error injection.
type {{$decorator}} struct {
    wrapped   {{.Interface.Type}}
	errorRate float64
	logger    log.Logger
}

// New{{.Interface.Name}} creates a new instance of {{.Interface.Name}} with error injection.
func New{{.Interface.Name}}(
    wrapped   persistence.{{.Interface.Name}},
	errorRate float64,
	logger    log.Logger,
) persistence.{{.Interface.Name}} {
    return &{{$decorator}}{
        wrapped:   wrapped,
        errorRate: errorRate,
        logger:    logger,
    }
}

{{range $methodName, $method := .Interface.Methods}}
    {{- if (and $method.AcceptsContext $method.ReturnsError)}}
        func (c *{{$decorator}}) {{$method.Declaration}} {
	        fakeErr := generateFakeError(c.errorRate)
	        var forwardCall bool
	        if forwardCall = shouldForwardCallToPersistence(fakeErr); forwardCall {
	            {{$method.ResultsNames}} = c.wrapped.{{$method.Call}}
	        }

	        if fakeErr != nil {
	            logErr(c.logger, "{{$interfaceName}}.{{$methodName}}", fakeErr, forwardCall, err)
	            err = fakeErr
	            return
            }
            return
        }
    {{else}}
           func (c *{{$decorator}}) {{$method.Declaration}} {
               {{ $method.Pass "c.wrapped." }}
           }
    {{end}}
{{end}}
