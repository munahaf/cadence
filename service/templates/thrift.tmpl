import (
	"context"

	"go.uber.org/yarpc"

	"github.com/uber/cadence/.gen/go/admin"
	"github.com/uber/cadence/.gen/go/history"
	"github.com/uber/cadence/.gen/go/matching"
	"github.com/uber/cadence/.gen/go/replicator"
	"github.com/uber/cadence/.gen/go/shared"
	"github.com/uber/cadence/common/types/mapper/thrift"
)

{{$prefix := (index .Vars "prefix")}}
{{$handlerName := (index .Vars "handler")}}
{{ $Decorator := (printf "%sHandler" $handlerName) }}

{{range $method := .Interface.Methods}}
{{$Request := printf "%sRequest" $method.Name}}
{{$Response := printf "%sResponse" $method.Name}}
func (g {{$Decorator}}) {{$method.Declaration}} {
	{{- if eq (len $method.Params) 1}}
	{{- if eq (len $method.Results) 1}}
	{{(index $method.Results 0).Name}} = g.h.{{$method.Call}}
	{{- else}}
	response, {{(index $method.Results 1).Name}} := g.h.{{$method.Call}}
	{{- end}}
	{{- else}}
	{{- if eq (len $method.Results) 1}}
	{{(index $method.Results 0).Name}} = g.h.{{$method.Name}}({{(index $method.Params 0).Name}}, thrift.To{{$prefix}}{{$Request}}({{(index $method.Params 1).Name}}))
	{{- else}}
	response, {{(index $method.Results 1).Name}} := g.h.{{$method.Name}}({{(index $method.Params 0).Name}}, thrift.To{{$prefix}}{{$Request}}({{(index $method.Params 1).Name}}))
	{{- end}}
	{{- end}}

	{{- if eq (len $method.Results) 1}}
	return thrift.FromError({{(index $method.Results 0).Name}})
	{{- else}}
	return thrift.From{{$prefix}}{{$Response}}(response), thrift.FromError({{(index $method.Results 1).Name}})
	{{- end}}
}
{{end}}
